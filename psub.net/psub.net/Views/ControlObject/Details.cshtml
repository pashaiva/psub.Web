@model Psub.DataService.DTO.ControlObjectDTO

@{
    ViewBag.Title = "Параметры объекта " + @Model.Name;
}

<div class="row">
    <div class="col-md-4">
        <fieldset>
            <legend>Объект</legend>
            <form>
                <div class="editor-label">
                    @Html.LabelFor(m => m.Name)
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                </div>
                <div class="editor-label">
                    @Html.LabelFor(m => m.Discription)
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(m => m.Discription, new { @class = "form-control" })
                </div>
            </form>
            <p>
                <button id="saveControlObject" title="Сохранить объект">
                    <img src="~/Images/save.png" alt="Сохранить объект" title="Сохранить объект" />
                </button>
            </p>
        </fieldset>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <h3>Параметры объекта</h3>
        <div id="dataParameters"></div>
        <h3>Состояние систем</h3>
        <table class="table table-striped table-bordered table-hover">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.RelayData.First().Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.RelayData.First().Value)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.RelayData.First().LastUpdate)
                </th>
            </tr>

            @foreach (var relay in Model.RelayData)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => relay.Name)
                    </td>
                    <td class="relay" data-relayId="@relay.Id" data-relayVal="@relay.Value">
                        @Html.EditorFor(modelItem => relay.Value)
                    </td>
                    <td>@Html.DisplayFor(modelItem => relay.LastUpdate)</td>
                    <td>
                        <button class="editRelayData"  onclick="JavaScript:document.location='@Url.Action("Edit", "RelayData", new { id = relay.Id })';" title="Редактировать" >
                            <img src="~/Images/edit.png" alt="Редактировать" title="Редактировать" />
                        </button>
                        <button class="deleteRelayData" date-id="@relay.Id" title="Удалить" >
                            <img src="~/Images/remove.png" alt="Удалить" title="Удалить" />
                        </button>
                    </td>
                </tr>
            }

        </table>
        <button id="saveRelayData" title="Сохранить датчики">
            <img src="~/Images/save.png" alt="Сохранить датчики" title="Сохранить датчики" />
        </button>
        <p>
            <button class="createRelayData"  onclick="JavaScript:document.location='@Url.Action("Create", "RelayData", new { id = Model.Id })';" title="Создать" >
                <img src="~/Images/add.png" alt="Создать" title="Создать" />
            </button>
        </p>
    </div>




</div>

<div>
    <div id="container" style="width: inherit;"></div>
</div>


<script type="text/javascript">
    $(function () {
        var dialog = new CustomModalDialog($("#container"), "График");

        $("#qwerty").click(function () {
            getGraph();
        });
        var dataGraph = new Array();

        function getGraph(xName, yName) {
            $.getScript("../../Scripts/Highcharts-4.0.3/js/highcharts.js", function () {
                $('#container').highcharts({
                    chart: {
                        type: 'scatter',
                        zoomType: 'xy',
                        name: yName + "/" + xName
                    },
                    title: {
                        text: yName + "/" + xName
                    },
                    xAxis: {
                        type: 'datetime'
                    },
                    yAxis: {
                        title: {
                            text: yName
                        },
                        min: 0
                    },
                    tooltip: {
                        headerFormat: '<b>{series.name}</b><br>',
                        pointFormat: '{point.x:%e. %b}: {point.y:.2f} ' + yName
                    },

                    series: [{
                        data: dataGraph,
                        name: yName
                    }]
                });
            });

        }

        $(".deleteRelayData").click(function () {
            var button = this;
            $.post('@Url.Action("Delete", "RelayData")' + '?id=' + $(button).attr("date-id"),
                function (res) {
                    if (res) {
                        $(button).parent().parent().hide("slow");
                    }
                });
        });

        $("#saveControlObject").click(function () {
            var button = $(this);
            $.post('@Url.Action("Save", "ControlObject")' + '?name=' + encodeURIComponent($("#Name").val()) + '&discription=' + encodeURIComponent($("#Discription").val()) + '&id=' + '@Model.Id',
                function (res) {
                    if (res) {
                        var p = $("<p class='message'>").hide();
                        var message = $("<span>").html("Сохранено");
                        p.appendTo(button.parent());
                        message.appendTo(p);
                        p.show("slow");
                        setTimeout('$(".message").hide("slow");', 3000);
                        refreshLog();
                    }
                });
        });

        $("#saveRelayData").click(function () {
            var button = $(this);
            var resStr = "";
            $(".relay").each(function (index, element) {
                resStr += $(element).attr("data-relayId") + '|' + $($(element).children().first()).is(':checked') + '*';
            });

            $.post('@Url.Action("SaveRelays", "ControlObject")' + '?relayData=' + resStr + '&controlObjectId=@Model.Id',
                function (res) {
                    if (res) {
                        var p = $("<p class='message'>").hide();
                        var message = $("<span>").html("Сохранено");
                        p.appendTo(button.parent());
                        message.appendTo(p);
                        p.show("slow");
                        setTimeout('$(".message").hide("slow");', 3000);
                        refreshLog();
                    }
                });
        });

        $.fn.simpleAjaxDataLoader = function (params) {
            params = $.extend({
                serviceUrl: '',
                serviceParams: '',
                ejsTemplate: '',
                progressImage: '',
                onLoadComplete: undefined
            }, params);
            return this.each(function () {
                var container = this;
                $.post(params.serviceUrl + params.serviceParams,
                    function (res) {
                        //var html = new EJS({ url: params.ejsTemplate }).render({ 'data': res });
                        $(container).empty();
                        var table = $("<table  class='table table-striped table-bordered table-hover'>");
                        var tr = $("<tr>").append($("<th>").html("Наименование")).append($("<th>").html("Значение")).append($("<th>").html("Параметр обнавлен")).appendTo(table);

                        $(res).each(function (index, element) {
                            var buttonGraph = $("<button>").html("график").attr({ "name1": element.Name }).click(function () {
                                $.post('@Url.Action("GetParametres", "ControlObject")?paramName=' + $(this).attr("name1"),
                                       function (res) {
                                           var yname = $(buttonGraph).attr("name1");
                                           dataGraph = new Array();
                                           $('#container').empty();
                                           $(res.day).each(function (index, element) {
                                               var ar = new Array();
                                               ar.push(Date.UTC(parseInt(res.year[index]), parseInt(res.month[index] - 1), parseInt(res.day[index]), parseInt(res.hour[index]), parseInt(res.minite[index]), parseInt(res.sec[index])), parseFloat(res.val[index]));
                                               dataGraph.push(ar);
                                           });
                                           getGraph("t", yname);
                                       });
                                dialog.showDialog();
                            });
                            var buttonCline = $("<button>").html("сброс").attr("name1", element.Name).click(function () {
                                $.post('@Url.Action("ClineDateParameter", "ControlObject")?id=@Model.Id&name=' + $(this).attr("name1"),
                                     function (res1) {
                                         alert("История показаний датчика удалена!");
                                     });
                            });
                            var tr1 = $("<tr>")
                                .append($("<td>").html(element.Name))
                                .append($("<td>").html(element.Value))
                                .append($("<td>").html(element.LastUpdate))
                                .append($("<td>").append(buttonGraph).append(buttonCline))
                                .appendTo(table);
                        });
                        $(container).append(table);
                        if (params.onLoadComplete != null && params.onLoadComplete != undefined && typeof params.onLoadComplete == 'function')
                            params.onLoadComplete(container);
                    });
            });
        };

        $.fn.uespSimpleActionLogList = function (params) {
            params = $.extend({
                serviceUrl: '',
                ejsTemplate: '',
                acquaintTasksCreater: '',
                executeTaskCreater: '',
                saveUrl: '',
                progressImage: '',
                closeImageLink: '',
                openImageLink: ''
            }, params);

            return this.each(function () {
                var container = this;
                $(container).empty();
                var table = $("<table>").attr({ "style": "width:100%", "class": "table table-striped table-bordered table-hover" });
                var headDiv = $("<div>").attr("style", "cursor:pointer;").attr("class", "logHead");
                var mainDiv = $("<div>");

                $(mainDiv).attr("style", "display:none;overflow:auto;");
                $(mainDiv).hide();

                var img = $("<img>").attr("src", params.openImageLink).attr("style", "vertical-align:middle;");

                $(headDiv).append($("<b>").append("<span>").html("История записи  "));
                $(headDiv).append(img);

                headDiv.click(function () {
                    if ($(container).height() < 60) {
                        $(mainDiv).show("blind");
                        img.attr("src", params.openImageLink);
                    } else {
                        $(mainDiv).hide("blind");
                        img.attr("src", params.closeImageLink);
                    }

                });

                headDiv.appendTo($(container));
                $.post(params.serviceUrl,
                    function (res) {
                        $(res).each(function (index, element) {
                            $(table).append($("<tr  class='noBerder'>").append($("<td class='noBerder'>").append($("<a class=''>").html(element.DateJson + " " + "<b>" + element.UserName + "</b>" + " " + element.ActionName))));
                        });
                    });

                $(table).appendTo($(mainDiv));
                $(mainDiv).appendTo($(container));
                $(mainDiv).show("blind");
            });
        };


        refreshData();
        refreshLog();

        setTimeout('refreshPage();', 120000);
    });

        function refreshData() {
            $("#dataParameters").simpleAjaxDataLoader({
                serviceUrl: '@Url.Action("DataParameters", new { id = Model.Id })',
                ejsTemplate: '@Url.Content("~/Scripts/ejsTemplates/dataParametres.ejs")',
                progressImage: '@Url.Content("~/Images/progress.gif")'
            });

            setTimeout('refreshData();', 1000);
        }

        function refreshLog() {
            $("#actionLog").uespSimpleActionLogList({
                serviceUrl: '@Url.Action("GetActionLogList", "ControlObject", new { id = Model.Id })',
                closeImageLink: '@Url.Content(@"~/Images/pointer_left.png")',
                openImageLink: '@Url.Content(@"~/Images/pointer_down.png")'
            });
        }

        function refreshPage() {
            window.location.reload();
            setTimeout('refreshPage();', 120000);
        }
</script>
